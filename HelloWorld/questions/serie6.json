[
  {
    "question": "1. Que retourne Promise.resolve(42) ?",
    "options": [
      "Une erreur",
      "Une promesse rejetée",
      "Une promesse déjà résolue avec la valeur 42",
      "Une promesse en attente"
    ],
    "answerIndex": 2,
    "explications": "Promise.resolve(42) crée une promesse qui est immédiatement résolue avec la valeur 42. Cela permet d'encapsuler une valeur dans une promesse pour l'utiliser dans des chaînes then(). \n Exemple:\n const p = Promise.resolve(42); \n p.then(value => console.log(value)); // Affiche : 42"
  }
,
  {
    "question": "2 - Que fait le mot-clé await ?",
    "options": [
      "Termine une fonction",
      "Met la fonction en pause jusqu’à ce qu’une promesse soit résolue",
      "Crée une promesse",
      "Répète une fonction"
    ],
    "answerIndex": 1,
    "explication": "await est utilisé à l'intérieur d'une fonction async pour attendre le résultat d'une promesse. Cela permet d’écrire du code asynchrone de manière plus lisible, comme du code synchrone. \n Exemple:\n async function getUser() { \n const response = await fetch(\"https://api.example.com/user\"); \n const data = await response.json(); \n console.log(data); \n }"
  },
  {
    "question": "3 - Quelle est la sortie de [...\"abc\"] ?",
    "options": [
      "\"abc\"",
      "[\"a\", \"abc\"]",
      "[\"a\", \"b\", \"c\"]",
      "[\"abc\"]"
    ],
    "answerIndex": 2,
    "explication": "L'opérateur de décomposition (...) transforme la chaîne \"abc\" en un tableau de caractères.. \n Exemple:\n const letters = [...\"abc\"]; \n  console.log(letters); // [\"a\", \"b\", \"c\"]"
    },
    {
    "question": "4 -  Que fait Object.freeze(obj) ?",
    "options": [
      "Supprime l’objet",
      "Rend l’objet temporairement inaccessible",
      "Supprime ses méthodes",
      "Rend l’objet immuable (impossible à modifier)"
    ],
    "answerIndex": 3,
    "explication": " Object.freeze() empêche toute modification : on ne peut ni ajouter, ni modifier, ni supprimer les propriétés de l’objet. \n Exemple:\n const user = Object.freeze({ name: \"Alice\" }); \n user.name = \"Bob\"; \n // Ne fonctionne pas \n console.log(user.name); // \"Alice\""
  },
  {
    "question": "5 - Comment tester si une variable est un tableau ?",
    "options": [
      "typeof var === \"array\"",
      "Array.isArray(var)",
      "var instanceof Object",
      "typeof var === \"object\""
    ],
    "answerIndex": 1,
    "explication": "Array.isArray() est la méthode la plus fiable pour savoir si une variable est bien un tableau, car typeof renvoie \"object\" pour les tableaux aussi.\n Exemple:\n console.log(Array.isArray([1, 2, 3])); // true \n console.log(Array.isArray(\"hello\"));  // false"
  },
  {
    "question": "6 -À quoi sert \"??\" (opérateur de coalescence nulle) ? ",
    "options": [
      "Remplace tous les false",
      "Supprime les undefined",
      "Donne une valeur par défaut si la première est null ou undefined",
      "Teste la nullité stricte"
    ],
    "answerIndex": 2,
    "explication": "?? vérifie si une valeur est nul ou undefined, et retourne une valeur de repli si c’est le cas. Contrairement à ||, il ne tient pas compte des 0, false, ou \"\". \n Exemple:\n const name = null; \n const username = name ?? \"Invité\"; // \"Invité\""
  },
  {
    "question": "7 - Que renvoie [1, 2, 3].map(parseInt) ?",
    "options": [
      "[1, NaN, NaN]",
      "[1, 2, 3]",
      "[1, 2, NaN]",
      "Erreur"
    ],
    "answerIndex": 0,
    "explication": "map() passe deux arguments à parseInt : la valeur et l’index. parseInt(\"2\", 1) est invalide, donc renvoie NaN. \n Exemple: \n [1, 2, 3].map((val, index) => parseInt(val, index)); \n // [1, NaN, NaN]"
  },
  {
    "question": "8 - Quelle est la différence entre == et === ?",
    "options": [
      "== est plus rapide",
      "Aucune différence",
      "=== permet la conversion automatique",
      "=== compare aussi les types"
    ],
    "answerIndex": 3,
    "explication": "== fait une conversion de type implicite, alors que === exige que valeurs et types soient identiques. \n Exemple: \n console.log(\"5\" == 5);  // true (conversion automatique) \n console.log(\"5\" === 5); // false (types différents)"
  },
  {
    "question": "9 - Que fait Object.assign() ? ",
    "options": [
      "Vide l’objet",
      "Supprime des propriétés",
      "Copie les propriétés d’un ou plusieurs objets dans un autre",
      "Restaure l’état d’un objet"
    ],
    "answerIndex": 2,
    "explication": "Object.assign(dest, source) copie les propriétés de source vers dest. Cela crée une copie superficielle (shallow copy).\n Exemple: \n const a = { x: 1 }; \n const b = { y: 2 }; \n const result = Object.assign({}, a, b); \n console.log(result); // { x: 1, y: 2 }\n "
  },
  {
    "question": "10 - Que fait delete obj.prop ?",
    "options": [
      "Supprime une propriété de l’objet",
      "Vide tout l’objet",
      "Gèle l’objet",
      "Masque la propriété"
    ],
    "answerIndex": 0,
    "explication": "delete permet de retirer une propriété spécifique d’un objet, mais cela ne fonctionne que si la propriété n’est pas verrouillée (configurable: false). \n Exemple: \n const user = { name: \"Alice\" }; \n delete user.name; \n console.log(user); // {}"
  },
  {
    "question": "11 -Que fait JSON.stringify() ?",
    "options": [
      "Parse un JSON",
      "Exécute une promesse",
      "Convertit un objet en chaîne JSON",
      "Compresse un objet"


    ],
    "answerIndex": 2,
    "explication": "Cette méthode transforme un objet JavaScript en chaîne JSON, utile pour le stockage ou l’envoi via une API. \n Exemple: \n const user = { name: \"Alice\", age: 30 };\n console.log(JSON.stringify(user)); \n // '{\"name\":\"Alice\",\"age\":30}'"
  },
  {
    "question": "12 - Quelle est la sortie de typeof NaN ?",
    "options": [
      "number",
      "NaN",
      "undefined",
      "number"
      
    ],
    "answerIndex": 3,
    "explication": "NaN (Not a Number) est de type number, même si la valeur représente une erreur numérique. \n Exemple:\n  console.log(typeof NaN); // \"number\""
  },
  {
    "question": "13 - Que retourne typeof null ?",
    "options": [
      "object",
      "null",
      "undefined",
      "NaN"
    ],
    "answerIndex": 0,
    "explication": "C’est une bizarrerie historique de JavaScript. typeof null retourne \"object\" à cause d’un bug jamais corrigé. \n Exemple:\n  console.log(typeof null); // \"object\""
  },
  {
    "question": "14 - Que fait la méthode .bind() ? ",
    "options": [
      "L’appelle directement",
      "Remplace la fonction",
      "Fixe le this d'une fonction",
      "Exécute plusieurs fonctions"
    ],
    "answerIndex": 2,
    "explication": ".bind() retourne une nouvelle fonction avec un this prédéfini, utile pour garder le contexte. \n Exemple: \n const person = { name: \"Alice\" };\n function greet() { console.log(\"Bonjour\" + this.name); } \n const greetAlice = greet.bind(person); \n greetAlice(); // Bonjour Alice"
  },
  {
    "question": "15 - Que retourne [1, 2, 3].reduce((a, b) => a + b, 0) ?",
    "options": [
      "6",
      "123",
      "6",
      "[1, 2, 3]"
    ],
    "answerIndex": 2,
    "explication": "reduce() additionne ici tous les éléments du tableau en partant de 0. \n Exemple: \n const total = [1, 2, 3].reduce((acc, val) => acc + val, 0); \n console.log(total); // 6"
  },
  {
    "question": "16 - Que fait Object.freeze() ?",
    "options": [
      "Supprime les propriétés d’un objet",
      "Rend l’objet immuable",
      "Clone l’objet",
      "Vide l’objet"
    ],
    "answerIndex": 1,
    "explication": "Object.freeze() empêche toute modification future de l’objet (ajout, suppression, modification de propriétés). \n Exemple: \n  const user = Object.freeze({ name: \"Alice\" }); \n user.name = \"Bob\"; \n console.log(user.name); // \"Alice\""
  },
  {
    "question": "17 - Quelle est la différence entre == et === ?",
    "options": [
      "=== compare aussi le type",
      "== est plus strict",   
      "== compare les références",
      "=== convertit les types"
    ],
    "answerIndex": 0,
    "explication": "=== compare la valeur ET le type, contrairement à == qui convertit les types avant comparaison. \n Exemple: \n console.log(5 == \"5\");  // true \n console.log(5 === \"5\"); // false"
  },
  {
    "question": "18 - Que fait setTimeout(fn, 0) ?",
    "options": [
      "Appelle la fonction immédiatement",
      "Ignore la fonction",
      "Exécute fn après la pile d’exécution",
      "Bloque le script"
    ],
    "answerIndex": 2,
    "explication": "Même avec 0 ms, setTimeout place la fonction dans la file d’attente, elle s'exécutera après les scripts synchrones. \n Exemple: \n setTimeout(() => console.log(\"A\"), 0); \n console.log(\"B\"); \n // Affiche : B puis A"
  },
  {
    "question": "19 - À quoi sert le mot-clé this ?",
    "options": [ 
      "À accéder à la variable globale",
      "À référencer l’objet courant",
      "À appeler une classe",
      "À créer une fonction"
    ],
    "answerIndex": 1,
    "explication": "this représente le contexte d’exécution courant, souvent l’objet qui appelle la méthode. \n Exemple: \n const car = { \n brand: \"Toyota\", \n getBrand() { return this.brand; } \n }; \n console.log(car.getBrand()); // Toyota"
  },
  {
    "question": "20 - Quelle méthode permet de copier un tableau sans le modifier ?",
    "options": [
      ".map()",
      ".filter()",
      ".reduce()",
      ".slice()"
    ],
    "answerIndex": 3,
    "explication": ".slice() sans argument retourne une copie du tableau d'origine. \n Exemple: \n const original = [1, 2, 3]; \n const copy = original.slice(); \n  console.log(copy); // [1, 2, 3]"
  }
  
  
]